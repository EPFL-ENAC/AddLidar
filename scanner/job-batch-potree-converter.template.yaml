apiVersion: batch/v1
kind: Job
metadata:
  name: "potree-converter"
  namespace: "epfl-eso-addlidar-prod"
spec:
  ttlSecondsAfterFinished: 3600 # 1 hour
  # prettier-ignore
  completions: {{ metacloud_files|length }} # Dynamic based on metacloud file count
  # prettier-ignore
  parallelism: {{ parallelism|default(2) }}
  backoffLimit: 2 # Maximum 2 retries per completion
  activeDeadlineSeconds: 7200 # 2 hour maximum job runtime
  completionMode: Indexed
  template:
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: job-name
                      operator: In
                      values:
                        - potree-converter
                topologyKey: "kubernetes.io/hostname"
      restartPolicy: Never
      initContainers:
        - name: "prepare-metacloud"
          image: "docker.io/library/bash:5.1"
          command:
            - "bash"
            - "-c"
            - |
              # Array of metacloud files to process as [mission_key, metacloud_path, metacloud_fp] tuples
              metacloud_files=(
              {% for file in metacloud_files %}
                "{{ file[0] }}|{{ file[1] }}|{{ file[2] }}"
              {% endfor %}
              )

              # Get the current metacloud file based on job index
              current_file_tuple=${metacloud_files[$JOB_COMPLETION_INDEX]}

              # Extract the mission key, path, and fingerprint from the tuple
              IFS='|' read -r mission_key metacloud_path metacloud_fp <<< "$current_file_tuple"

              # Get the relative path from original dir
              rel_metacloud_path=${metacloud_path#/lidar/}

              # Check if metacloud file exists
              if [ -n "${mission_key}" ] && [ -f "/lidar/${rel_metacloud_path}" ]; then
                echo "Found valid metacloud file: /lidar/${rel_metacloud_path}"
                # Write the information to files for the main container
                echo "${mission_key}" > /data/mission_key.txt
                echo "/lidar/${rel_metacloud_path}" > /data/metacloud_path.txt
                echo "${metacloud_fp}" > /data/metacloud_fingerprint.txt
                echo "true" > /data/file_valid.txt
              else
                echo "WARNING: Metacloud file /lidar/${rel_metacloud_path} does not exist"
                echo "false" > /data/file_valid.txt
              fi
          volumeMounts:
            - name: fts-addlidar
              subPath: "fts-addlidar/LiDAR"
              mountPath: "/lidar"
              readOnly: true
            - mountPath: /data
              name: data
          resources:
            limits:
              cpu: "100m"
              memory: "100Mi"
            requests:
              cpu: "10m"
              memory: "10Mi"
      containers:
        - name: "potree-converter"
          image: "{{ potree_converter_image_registry | default('ghcr.io') }}/{{ potree_converter_image_name | default('epfl-enac/epfl-eso/addlidar/potree-converter') }}:{{ potree_converter_image_tag | default('latest') }}{% if potree_converter_image_sha256 %}@sha256:{{ potree_converter_image_sha256 }}{% endif %}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "-c"]
          args:
            - |
              # Set backend URL for API calls
              BACKEND_URL="{{ backend_url | default('http://backend-internal') }}"

              # Check if the file is valid before proceeding
              if [ -e "/data/file_valid.txt" ] && [ "$(cat /data/file_valid.txt)" == "true" ]; then
                MISSION_KEY=$(cat /data/mission_key.txt)
                INPUT_FILE=$(cat /data/metacloud_path.txt)
                METACLOUD_FP=$(cat /data/metacloud_fingerprint.txt)
                START_TIME=$(date +%s)
                
                # Set environment variables required by entrypoint.sh
                export INPUT_DIR="/lidar/${MISSION_KEY}/"
                export INPUT_FILE
                export OUTPUT_DIR="/potree/${MISSION_KEY}"
                export EXTRA_ARGS="--overwrite"
                
                echo "Converting metacloud file: ${INPUT_FILE} for mission ${MISSION_KEY} from ${INPUT_DIR}"
                echo "Output directory: ${OUTPUT_DIR}"
                
                # Create temporary log file for capturing detailed output
                TEMP_LOG_FILE="/tmp/potree_${MISSION_KEY//\//_}_$$.log"
                
                echo "Starting potree conversion - logs will be visible here and saved to: $TEMP_LOG_FILE"
                echo "==================== POTREE CONVERSION START ===================="
                
                # Use tee to show logs in real-time AND save to file
                # The logs will be visible when you kubectl logs or kubectl exec into the pod
                if /entrypoint.sh 2>&1 | tee "$TEMP_LOG_FILE"; then
                  echo "==================== POTREE CONVERSION SUCCESS =================="
                  echo "Potree conversion successful for ${MISSION_KEY}"
                  
                  # Success
                  END_TIME=$(date +%s)
                  PROCESSING_TIME=$((END_TIME - START_TIME))
                  
                  echo "Updating database for ${MISSION_KEY} with success status"
                  
                  curl -X PUT "${BACKEND_URL}/sqlite/potree_metacloud_state/${MISSION_KEY}" \
                    -H "Content-Type: application/json" \
                    -d "{\"fingerprint\":\"${METACLOUD_FP}\",\"processing_status\":\"success\",\"processing_time\":${PROCESSING_TIME}}" \
                    --max-time 30 --retry 3 && \
                  echo "Database updated successfully for ${MISSION_KEY}" || \
                  echo "Failed to update database for ${MISSION_KEY}"
                  
                  # Clean up log file on success
                  rm -f "$TEMP_LOG_FILE"
                else
                  echo "==================== POTREE CONVERSION FAILED ==================="
                  # Failure
                  RESULT=$?
                  END_TIME=$(date +%s)
                  PROCESSING_TIME=$((END_TIME - START_TIME))
                  
                  echo "Potree conversion failed for ${MISSION_KEY} with exit code ${RESULT}"
                  echo "Log file contents (last 100 lines):"
                  echo "--------------------"
                  
                  # Show the error logs in real-time output as well
                  if [ -f "$TEMP_LOG_FILE" ]; then
                    tail -n 100 "$TEMP_LOG_FILE"
                    echo "--------------------"
                    
                    # Capture detailed error logs for database (potree logs can be longer)
                    DETAILED_ERROR_MSG=$(tail -n 100 "$TEMP_LOG_FILE" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/' | tr -d '\n' | sed 's/\\n$//')
                  else
                    echo "No log file found"
                    DETAILED_ERROR_MSG="No detailed logs available"
                  fi
                  
                  ERROR_MSG="Conversion failed with exit code ${RESULT}"
                  
                  echo "Updating database for ${MISSION_KEY} with failed status and detailed logs"
                  
                  curl -X PUT "${BACKEND_URL}/sqlite/potree_metacloud_state/${MISSION_KEY}" \
                    -H "Content-Type: application/json" \
                    -d "{\"fingerprint\":\"${METACLOUD_FP}\",\"processing_status\":\"failed\",\"processing_time\":${PROCESSING_TIME},\"error_message\":\"${ERROR_MSG}\",\"detailed_error_message\":\"${DETAILED_ERROR_MSG}\"}" \
                    --max-time 30 --retry 3 && \
                  echo "Database updated with failed status for ${MISSION_KEY}" || \
                  echo "Failed to update database for ${MISSION_KEY}"
                  
                  # Clean up log file
                  rm -f "$TEMP_LOG_FILE"
                  exit $RESULT
                fi

                # Show the current state of the database record after update
                echo "Database record state after update:"
                curl -s "${BACKEND_URL}/sqlite/potree_metacloud_state/${MISSION_KEY}" \
                  --max-time 10 | jq -r '.mission_key, .processing_status, .error_message' 2>/dev/null || \
                echo "Failed to query database record"
              else
                # Handle invalid or missing metacloud file case
                if [ -e "/data/mission_key.txt" ]; then
                  MISSION_KEY=$(cat /data/mission_key.txt)
                  METACLOUD_FP=$(cat /data/metacloud_fingerprint.txt 2>/dev/null || echo "")
                  
                  echo "Skipping potree conversion - invalid or missing metacloud file for mission: ${MISSION_KEY}"
                  
                  # Create detailed error message for invalid/missing metacloud file
                  METACLOUD_FILE_PATH="/lidar/${MISSION_KEY}/${MISSION_KEY}.metacloud"
                  DETAILED_ERROR_MSG="Metacloud file validation failed:\\nExpected file: ${METACLOUD_FILE_PATH}\\nFile exists: $([ -f \"${METACLOUD_FILE_PATH}\" ] && echo 'true' || echo 'false')\\nFile size: $([ -f \"${METACLOUD_FILE_PATH}\" ] && stat -c%s \"${METACLOUD_FILE_PATH}\" || echo 'N/A')\\nInput directory exists: $([ -d \"${INPUT_DIR}\" ] && echo 'true' || echo 'false')\\nTimestamp: $(date -u)"
                  
                  # Update database with failed status for invalid/missing file via API
                  echo "Updating database for ${MISSION_KEY} with failed status (invalid/missing metacloud file)"
                  
                  curl -X PUT "${BACKEND_URL}/sqlite/potree_metacloud_state/${MISSION_KEY}" \
                    -H "Content-Type: application/json" \
                    -d "{\"fingerprint\":\"${METACLOUD_FP}\",\"processing_status\":\"empty\",\"processing_time\":0,\"error_message\":\"Metacloud file is invalid or missing\",\"detailed_error_message\":\"${DETAILED_ERROR_MSG}\"}" \
                    --max-time 30 --retry 3 && \
                  echo "Database updated with failed status for invalid metacloud file ${MISSION_KEY}" || \
                  echo "Failed to update database for ${MISSION_KEY}"
                else
                  echo "No mission key available - critical error in job setup"
                  exit 1
                fi
                
                exit 0
              fi
          volumeMounts:
            - name: fts-addlidar
              subPath: "fts-addlidar/LiDAR"
              mountPath: "/lidar"
              readOnly: true
            - name: fts-addlidar
              subPath: "fts-addlidar/LiDAR-Zips/Potree"
              mountPath: "/potree"
            - mountPath: "/data"
              name: data
          resources:
            limits:
              cpu: "4"
              memory: "16Gi"
            requests:
              cpu: "500m"
              memory: "1Gi"
      volumes:
        - name: data
          emptyDir: {}
        - name: fts-addlidar
          persistentVolumeClaim:
            claimName: "{{ fts_addlidar_pvc_name }}"
