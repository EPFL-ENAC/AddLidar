apiVersion: batch/v1
kind: Job
metadata:
  name: "job-batch-lidar-zip" # Kubernetes will append a unique suffix
  namespace: "epfl-cryos-addlidar-potree-prod"
spec:
  ttlSecondsAfterFinished: 3600 # 1 hour
  completions: 5 # Adjust based on the number of folders you need to process
  parallelism: 4 # Process 4 folders concurrently
  completionMode: Indexed
  template:
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: job-name
                      operator: In
                      values:
                        - job-batch-lidar-zip
                topologyKey: "kubernetes.io/hostname"
      restartPolicy: Never
      initContainers:
        - name: "prepare-folders"
          image: "docker.io/library/bash"
          command:
            - "bash"
            - "-c"
            - |
              # List of folders to process
              folders=(
                "0001_Mission_Root/01_lidar_mounting_info"
                "0001_Mission_Root/03_Classified_Colorized Point Index"
                "0001_Mission_Root/05_GNSS_INS_Data"
                "0001_Mission_Root/06_RGB_Images"
              )

              # Get the current folder based on job index
              current_folder=${folders[$JOB_COMPLETION_INDEX]}

              # Check if folder exists and is not empty
              if [ -n "${current_folder}" ] && [ -d "/lidar/${current_folder}" ] && [ "$(ls -A /lidar/${current_folder} 2>/dev/null)" ]; then
                echo "Found valid folder: /lidar/${current_folder}"
                # Write the input and output paths to a file for the main container
                echo "/lidar/${current_folder}" > /data/input_path.txt
                echo "/zips/${current_folder}.tar.gz" > /data/output_path.txt
                echo "true" > /data/folder_valid.txt
              else
                echo "WARNING: Folder /lidar/${current_folder} does not exist or is empty"
                echo "false" > /data/folder_valid.txt
              fi
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /lidar
              name: lidar-data
              readOnly: true
          resources:
            limits:
              cpu: "100m"
              memory: "100Mi"
            requests:
              cpu: "10m"
              memory: "10Mi"
      containers:
        - name: "lidar-zip-job"
          image: "ghcr.io/epfl-enac/lidar-zip:latest"
          command: ["/bin/bash", "-c"]
          args:
            - |
              # Check if the folder is valid before proceeding
              if [ -e "/data/folder_valid.txt" ] && [ "$(cat /data/folder_valid.txt)" == "true" ]; then
                INPUT_PATH=$(cat /data/input_path.txt)
                OUTPUT_PATH=$(cat /data/output_path.txt)
                echo "Processing folder: $INPUT_PATH"
                /usr/local/bin/archive_one_folder.sh "$INPUT_PATH" "$OUTPUT_PATH"
                echo "Archive created: $OUTPUT_PATH"
              else
                echo "Skipping archive process - invalid or empty folder"
                exit 0
              fi
          volumeMounts:
            - mountPath: /lidar
              name: lidar-data
              readOnly: true
            - mountPath: /zips
              name: lidar-zips
            - mountPath: /data
              name: data
          resources:
            limits:
              cpu: "8"
              memory: "8Gi"
            requests:
              cpu: "1"
              memory: "1Gi"
      volumes:
        - name: data
          emptyDir: {}
        - name: lidar-data
          persistentVolumeClaim:
            claimName: addlidar-smb-pvc
        - name: lidar-zips
          persistentVolumeClaim:
            claimName: addlidar-smb-zip-pvc
